name: CI

on: [push, pull_request]

jobs:
  stylua:
    name: stylua
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: JohnnyMorganz/stylua-action@v3
        with:
          version: latest
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --color always --check lua

  lint-check:
    name: lint-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # - name: Jupyter base setup
      #   uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      # - name: Install pnpm
      #   uses: pnpm/action-setup@v2
      #   with:
      #     version: 8
      # - name: Install jupyterlab
      #   run: python -m pip install -U "jupyterlab>=4.0.0,<5"
      # - name: Lint the extension
      #   run: |
      #     set -eux
      #     jlpm
      #     jlpm run lint:check

  ruff:
    name: ruff
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: chartboost/ruff-action@v1
        with:
          src: "./neopyter"

  check_links:
    name: Check Links
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1

  lint:
    runs-on: ubuntu-latest
    needs: [stylua, lint-check, ruff, check_links]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    # - name: Jupyter base setup
    #   uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
    # - name: Install pnpm
    #   uses: pnpm/action-setup@v2
    #   with:
    #     version: 8
    # - name: Install dependencies
    #   run: python -m pip install -U "jupyterlab>=4.0.0,<5"
    # - name: Build the extension
    #   run: |
    #     set -eux
    #     python -m pip install .[test]
    #     jupyter labextension list
    #     jupyter labextension list 2>&1 | grep -ie "neopyter.*OK"
    #     python -m jupyterlab.browser_check
    # - name: Package the extension
    #   run: |
    #     set -eux
    #     pip install build
    #     python -m build
    #     pip uninstall -y "neopyter" jupyterlab
    # - name: Upload extension packages
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: extension-artifacts
    #     path: dist/neopyter*
    #     if-no-files-found: error
    #

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        architecture: 'x64'
    # - uses: actions/download-artifact@v3
    #   with:
    #     name: extension-artifacts
    # - name: Install and Test
    #   run: |
    #     set -eux
    #     # Remove NodeJS, twice to take care of system and locally installed node versions.
    #     sudo rm -rf $(which node)
    #     sudo rm -rf $(which node)
    #
    #     pip install "jupyterlab>=4.0.0,<5" neopyter*.whl
    #
    #
    #     jupyter labextension list
    #     jupyter labextension list 2>&1 | grep -ie "neopyter.*OK"
    #     python -m jupyterlab.browser_check --no-browser-test

  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    # - name: Jupyter base setup
    #   uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
    # - name: Download extension package
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: extension-artifacts
    # - name: Install the extension
    #   run: |
    #     set -eux
    #     python -m pip install "jupyterlab>=4.0.0,<5" neopyter*.whl
    # - name: Install dependencies
    #   working-directory: ui-tests
    #   env:
    #     PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    #   run: jlpm install
    # - name: Set up browser cache
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       ${{ github.workspace }}/pw-browsers
    #     key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}
    # - name: Install browser
    #   run: jlpm playwright install chromium
    #   working-directory: ui-tests
    # - name: Execute integration tests
    #   working-directory: ui-tests
    #   run: |
    #     jlpm playwright test
    # - name: Upload Playwright Test report
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: neopyter-playwright-tests
    #     path: |
    #       ui-tests/test-results
    #       ui-tests/playwright-report

  test:
    runs-on: ubuntu-latest
    needs: [test_isolated, integration-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  vimdoc:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ github.ref == 'refs/heads/abao/dev' }}
    steps:
      - uses: actions/checkout@v3
      - name: panvimdoc
        uses: kdheepak/panvimdoc@main
        with:
          vimdoc: neopyter
          demojify: true
          treesitter: true
      - name: cat
        run: cat doc/neopyter.txt
      - run: git status
      - name: Push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "docs(vimdoc): auto-generate vimdoc"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
